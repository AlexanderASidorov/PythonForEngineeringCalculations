# -*- coding: utf-8 -*-

import numpy as np
'''
Матрица – это вектор, перенесенный на следующий уровень. Матрицы как
математические объекты очень разноплановы. В них могут храниться наборы чисел, 
уравнений, геометрические преобразования, положения частиц во времени, 
финансовые отчеты и огромадное число других вещей.
В зависимости от контекста матрицы концептуализируются в уме как множество 
векторов-столбцов, расположенных бок о бок.
'''

# неквадратная матрица
matrix01= np.array([[0.1, 0.3, 1.2],
                   [2.1, 0.2, 1.0],
                   [0.7, 2.1, 0.4],
                   [1.2, 2.2, 0.9]])


# Квадратная матрица случайных чисел
matrix02 = np.random.randn(5, 5)

# Диаганаль матрицы
diagonal_01_01 = np.diag(matrix01, k=0)
diagonal_01_02 = np.diag(matrix01, k=-1)

# Извлечение верхнего треугольника
triangl_01_upper = np.triu(matrix02, k=0)
triangl_01_lower = np.tril(matrix02, k=0)

'''
Единичная матрица является одной из наиболее важных специальных
матриц. Она эквивалентна числу 1 в том смысле, что любая матрица или
вектор, умноженные на единичную матрицу, будут той же самой матрицей
или вектором. 
Единичная матрица – это квадратная диагональная матрица, все диагональные 
элементы которой имеют значение 1. Она обозначается буквой I. 
'''

I5 = np.eye(5, k=0)
I6=np.eye(6, k=1) # диагональ можно, при необходимости сместить

# Матрица нулей и единиц
zeros = np.zeros([5, 3])
ones = np.ones([5, 3])
# Матрица заполненная каким-то числом
nines = np.full([5, 3], 9.0)

'''
Сложение и вычитание матриц:
Две матрицы складываются путем сложения соответствующих элементов
матриц.
'''
matrix_01 = np.array([[1, 2],
                      [3, 4]])

matrix_02 = np.array([[5, 6],
                      [7, 8]])

sum_01_02 = matrix_01 + matrix_02


'''
Сдвиг матрицы это прибавление постоянного значения к диагонали. Реализуется 
посредством прибавления умноженной на скаляр единичной матрицы:
A + λI.
'''

A = np.array([[0.1, 0.3, 1.2],
              [2.1, 0.2, 1.0],
              [0.7, 2.1, 0.3]])

lamb = 0.2 

I = np.eye(3, k=0)

shift_A = A + lamb*I


'''
Умножение матриц:
Адамово - перемножение соответсвующих элементов матрицы
Стандартное - точечных произведений между строками одной матрицы 
и столбцами другой матрицы
'''

A = np.array([[0.1, 0.3, 1.2],
              [2.1, 0.2, 1.0],
              [0.7, 2.1, 0.3]])

B= np.array([[10, 0.3, 1.2],
              [2.1, 20, 1.0],
              [0.7, 2.1, 30]])

AdamovoAB = A*B

StandartAB = A@B
# Допустимо стандартное перемножение матриц в случае, если количество строк
# первой равно количеству столбцов второй, т.е. допустим у нас есть две матрицы
A = np.array([[0.1, 0.3, 1.2],
              [2.1, 0.2, 1.0]])


B= np.array([[10, 0.3],
              [2.1, 20],
              [0.7, 2.1]])


StandartAB = A@B
StandartBA = B@A


# Транспонирование матрицы

A_transposed = A.transpose()


'''
Ранг – грубо говоря это количество ненулевых строк матрицы
'''
matrix02 = np.random.randn(5, 5)
rank_02 = np.linalg.matrix_rank(matrix02)
rank_A = np.linalg.matrix_rank(A)


'''
Определитель (детерминант) матрицы 
'''

det_02 = np.linalg.det(matrix02)

'''
Обратная матрица
'''

inverse_02 = np.linalg.inv(matrix02)


#%%
"""
Объектно-ориентированное программирование (ООП) – это стиль программирования, 
в которой для представления данных и для проведения операций над этими данными 
используются объекты (экземпляры класса).

Класс - шаблон для создания объекта.

Классы определяют:
    структуру данных, которые характеризуют объект;
    свойства (атрибуты) и статус (состояние) объекта;
    операции, которые можно совершать с данными объекта (методы).


Пример:
"""

import numpy as np


class Trianngle():
    """
    Расчет площади и периметра треугальника по его координатам.
    
    """
    
    amount = 0
    
    def __init__(self, a, b, c):
        '''
        Parameters
        ----------
        a, b, c : list of floats, координата x и координата y
       
        Returns
        -------
        None.

        '''
        
        self.a = np.array(a)
        self.b = np.array(b)
        self.c = np.array(c)
        Trianngle.amount +=1
        
        
        self.coord = np.array([a, b, c])
        
        self.triangle_area = self.area()
        self.triangle_perimeter = self.perimeter()
        
        
    def __del__(self):
        Trianngle.amount -=1
        
    
    def area (self):
        '''
        Рассчет площади треугольника
        '''

        coord = self.coord
        
        matrix = np.array([ [  coord[0,0] - coord[2,0], coord[0,1] - coord[2,1]],
                            [coord[1,0] - coord[2,0], coord[1,1] - coord[2,1]] ])
        
        area = abs(0.5*np.linalg.det(matrix))
        
        return area
    
    def perimeter (self):
        '''
        Рассчет периметра треугольника
        '''
              
        ab = (np.sum((self.a-self.b)**2, axis=0))**0.5
        bc = (np.sum((self.b-self.c)**2, axis=0))**0.5
        ca = (np.sum((self.c-self.a)**2, axis=0))**0.5
        
        return ab+bc+ca
  
        
if __name__ == "__main__":
    first_triangle =  Trianngle([0, 0], [5, 0], [2.5, 5])
    second_triangle =  Trianngle([0, 0], [-5, 0], [-2.5, -5])         
    third_triangle =  Trianngle([0, 1], [-3, 0], [-2.5, -5])
    
    #del second_triangle
        
       
        
       
        
       
        
       
        
       
        
       
        
       
        
    
