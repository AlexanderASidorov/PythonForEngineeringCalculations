# -*- coding: utf-8 -*-

import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import fsolve


"""
Задача 5. Дифференцирование.

На практике уравнение Аврами часто имеет более сложную форму, чем мы приводили 
ранее из-за того, что в реальности одновременно может происходить несколько 
фазовых превращений конкурирующих друг с другом.
Сильно вдаваться в подробности не будем, просто обозначим, что уравнение
X = 1 - exp(-b*(t**n))
приходится записывать в виде:
X = Xeq*(1 - exp(-b*(t**n)))

здесь Xeq - постоянный коэффициент, который варьируется от 0 до 1 и фактически
пропорционально уменьшает X
b, n - коэффициенты, где n имеет физический смысл, в который мы, опять же не
будем вдаваться, но отметим, что n варьируется в пределах от 2 до 4.
t - время

Создадим функцию для этого уравнения и функцию для определения его 
коэффициентов (аналогично задаче 2 лекции 12):
"""

def avrami(t, Xeq ,b, n):
    '''
    Уравение Аврами

    Parameters
    ----------
    t : float, время изотермической выдержки;
    Xeq: float, коэффициент Xeq (фактчески Xmax);
    b : float, коэффициент b;
    n : float, коэффициент n;
    

    Returns
    -------
    fraction : float в пределах от 0 до 1. Объемная доля дочерней фазы. 

    '''
      
    fraction = Xeq*(1 - np.exp((-1/b)*(t**n)))
    
    return fraction


t1 = 98.2
x1 = 0.99
t2 = 54.1
x2 = 0.5
Xeq = 0.9
b=1000
n=2



def avrami_system (x, t1, t2, x1, x2, Xeq):
    '''
    Система из двух уравненией Аврами при различном времени выдержки в 
    изотермических условиях

    Parameters
    ----------
    x : NumPy array, коэффициенты b и n.
    t1, t2: float, время необходимое для образования x1 и x2
    x1, x2: float, объемная доля образовавшаяся за время t1 и t2
    Xeq: float, коэффициент Xeq (фактчески Xmax)
    

    Returns
    -------
    Если коэффициенты подобраны правильно, то функция должна возвращать список
    из двух нулей или близкие им значения

    '''
       
    b = x[0]
    n = x[1]
    
    equation_1 = avrami(t1, Xeq, b, n) - x1 
    equation_2 = avrami(t2, Xeq, b, n) - x2
    
    
             
    return [equation_1,  equation_2]





root = fsolve(avrami_system, [100000, 3.0], args=(t1, t2, x1, x2, Xeq))
b = root[0]
n=root[1]













