# -*- coding: utf-8 -*-
"""
Created on Thu Sep  8 14:23:24 2022

@author: sidorow
"""

# 1. СПИСКИ в Python
# 2. ДОМАШНЕЕ ЗАДАНИЕ 
#
#
#%%    СПИСКИ в Python
# Список в Python проще всего предствивить ввиде одномерного масива чисел. 
# Создается список с помощью квадратных скобок, каждая ячейка массива отделяется 
# от другой с помощью запятой
ListNumbers=[1, 4, 6, 3.14, 5e+07]
# При этом список может содержать разные перемерные, как числа, так и текст:
ListNumbersText=[1, 4, 6, 3.14, 5e+07, 'Metal forming', 'Heat Treatment']
#%%
# Существует множество команд для редактирвоания списков. Список команд вы можете
# уведеть, если наберете название списка (ListNumbers в нашем случае), посвавите
# точку и нажмене на клавиатуре Tab. В частвности, есть команда append, позволяющая 
# что-то добавить в конец списка:
ListNumbers.append(100)
# или команда pop, позволяющая, наоборот удалить либо последнюю строку:
ListNumbersText.pop()
# либо определенный элемент (об индексации элементов списка чуть позже)
ListNumbersText.pop(3)
# Можем полность почистить содержимое списка:
ListNumbersText = []
# Можем узнать количество элементов в списке
Length = len(ListNumbers)
# и т.д.
#%% 
# Допустим нам нужно умножить все числа из списка ListNumbers на 2. Если мы
# просто умножим попробуем записать ListNumbers = ListNumbers*2, то ничего не
# получится, у нас просто все числа из списка скопируются в его конец и список 
# станет в два раза длиннее:
ListNumbersDoubled=ListNumbers*2
# Для решения подобных задач, нам необходимо понять, как списки в Python индексируются...
# Переменные из списка пронумерованы от 0 до n-1, где n - длина списка. Вызвать 
# тот или иной элеменнт из списка мы можем поместив индекс в квадратные скобки
# после имени списка. Например:
ZeroElement=ListNumbers[0]
ThirdElement=ListNumbers[2]
# При этом, если нас интересует последний номер из списка, а длину списка мы 
# по каким-то причинам не знаем, то мы можем вызвать его как элемент номер -1, т.е.:
LastElement=ListNumbers[-1]
# Мы можем сделать срез из списка, т.е. скопировать в другой список элементы, 
# например со 1-го по 3-й:
Slice01=ListNumbers[1:4]
# обратите, внимание, что если нам нужно задать диапазон индексов от n до m, то
# мы задаем диапазон от n до !!!!! m+1 !!!!!
# Можно сдедать срез от, например, второго до последнего элемента:
Slice02=ListNumbers[2:-1]
# и добавить последний элемент:
Slice02.append(ListNumbers[-1])
# Если нам нужно выбрать элементы через 1, то можно это сделать следующим образом:
Slice03=ListNumbers[0:-1:2]
# т.е. задается диапазон и шаг с которым нужно копировать чилса из списка
#%%
# Возвращаясь к исходной задаче, а именно умножить все числа из списка ListNumbers на 2:
for i in range(Length):
   ListNumbers[i] = ListNumbers[i]*2
# Т.е. у нас есть размер списка, мы его ранее определили и он равен переменной
# Length. С помощью оператора for мы запускаем итерационный цикл, в котором
# последовательно каждое число из списка умножается на 2
#%%
# Давайте скопируем список ListNumbers двумя способами: в список Copy01ListNumbers
# просто с помощью знака = и в список Copy02ListNumbers с помощью команды list
Copy01ListNumbers=ListNumbers
Copy02ListNumbers=list(ListNumbers)
# После этого давайте прибавим к каждому числу в списке ListNumbers единицу
for i in range(Length):
   ListNumbers[i] = ListNumbers[i]+1
   ListSumm=list()
for i in range(Length):
    ListSumm.append(Copy01ListNumbers[i]+Copy02ListNumbers[i])
"""
Обратите внимание, что вместе со списком ListNumbers изменился список 
Copy01ListNumbers. Это характерная особенность сложных объектов Python (списки, 
словари, массивы и т.д.):
знаком = мы не создаем независимую переменную, а лишь дочернюю переменную 
жестко связанную с материнской. Если нам нужно отвязать дочерний список от
материнского, неоьходимо использовать команду list()
Если нам нужно почленно сложить два списка, то мы действуем аналогично, как при
умножении на 2, но для начала можем создать пустой список, в который
потом будем итерационно добавлять команой append результат почленного сложения:
"""
#%% ДОМАШНЕЕ ЗАДАНИЕ 
# Имеется массив данных Инженерные напряжения - Инженерная деформация в области
# пластической деформации
# Значения инженерных напряжений (в МПа):
# 378.5  397.3  431.23  461.56  476.13  487.83  489.32  488.16  486.71  455.11
# Знаяения инженерных деформаций (в долях от 1):
# 0 0.0125  0.025  0.05  0.075  0.1  0.125  0.15 0.175 0.2
# Рассчитать Истинные напряжения и Истинную деформацию во всем диапазоне деформации
# образца
#
# Напоминание:
# Истинная деформация = ln*(1+Инженерная деформация)
# Истинное напряжение = Инженерное напряжение*(1 + Инженерная деформация)























