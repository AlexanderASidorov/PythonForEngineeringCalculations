# -*- coding: utf-8 -*-
"""
Created on Fri Mar 24 12:02:55 2023

@author: sidorow
"""

"""
Решение задачи упругой деформации колонны переменного сечения методом конечных
элементов
"""
# Импорт нужных библиотек
import numpy as np
# Исходные данные
E=200000 # модуль Юнга, Па
A=[100, 110, 120, 130, 140, 150] # площади поперечного сечения колонны, мм**2
L=100 # длина каждого элемента, мм
Q=100000 # нагрузка на стержень, Н
#%% Определяем жесткость каждого элемента
k=[] # создаем пустой список, где будем хранить жесткости элементов
Length = len(A) # поределяем количесвто конечных элементов в нашей модели
for i in range(Length): # для каждого элемента делаем следующее
    Stifness=(E*A[i])/L # по закону Гука оперделяем жесткость элемента
    k.append(Stifness) # получившийся результат для i-го элемента добавляем в 
    # общий список k
#%% Собираем матрицу жесткости. Пока "вручную":
K=np.array([[k[0], -k[0], 0, 0, 0, 0], 
            [-k[0], k[0]+k[1], -k[1], 0, 0, 0],
            [0, -k[1], k[1]+k[2], -k[2], 0, 0],
            [0, 0, -k[2], k[2]+k[3], -k[3], 0], 
            [0, 0, 0, -k[3], k[3]+k[4], -k[4]],
            [0, 0, 0, 0, -k[4], k[4]]])
#%% Собираем вектор внешних нагрузок
R=np.array([-Q, 0, 0, 0, 0, Q])
#%% С учетом граничных условий, т.е. с учетомм, что перемещеине последнего узла
# сетки КЭ = 0 мы можем удалить шестую строку и шестой столбец в матрице жесткости,
# а так же шестую строку в векторе нагрузки.
# В резульате получаем:
K_NBC=np.array(K) # сохраним на всякий случай исходную матрицу жесткости
R_NBC= np.array(R) # то же самое для вектора внешних нагрузок
K=np.delete(K, Length-1, axis=0) # удаляем последнюю сторку
K=np.delete(K, Length-1, axis=1) # удяляем последний столбец
R=np.delete(R, Length-1)
#%% Решение системы уравнению относительно перемещений U
# Метод инверсии
KInv=np.linalg.inv(K) # Находим матрицу обратную K
SingleMatrix=np.matmul(K,KInv) # проверяем, что произведение матрици K и обратной
                                # ей KInv дает единичную матрицу
Uinv=np.matmul(KInv,R) # находим вектор перемещений
#%% Метод Solve
USolve=np.linalg.solve(K, R)
#%% Метод наименьших квадратов
ULsqr=np.linalg.lstsq(K, R,)
ULsqr=ULsqr[0]






























